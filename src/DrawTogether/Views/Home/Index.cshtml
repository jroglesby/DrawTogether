@{
    ViewBag.Title = "Chat";
}
<div class="container">
    
    <input type="hidden" id="displayname" />
    <div id="socialBox">
        <div id="usersDiv">
            <h3>Users Online</h3>
            <ul id="users"></ul>
        </div>
        <div id="discussionDiv">
            <ul id="discussion"></ul>
            <div id="sendChat">
                <input type="text" id="message" />
                <input type="button" id="sendmessage" value="Send" />
            </div>
        </div>
    </div>
    <div id="controls">
        <table>
            <tr>
                <td>
                    <input type="button" id="clearButton" value="Clear Canvas" />
                </td>
                <td>
                    <input type="color" id="colorSelector" />
                </td>
            </tr>
        </table>
        
        
    </div>

    <canvas id="drawingCanvas" width="800" height="800" style="border:1px solid black; display:inline-block;">

    </canvas>
</div>
@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/lib/signalr/jquery.signalR.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--Reference to Fabric, the drawing library-->
    <script src="~/lib/fabric/fabric.min.js"></script>
    <!--Reference to spectrum, the color picker library-->
    <script src="~/lib/spectrum/spectrum.js"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script type="text/javascript">
        $(function () {
            var canvas = new fabric.Canvas('drawingCanvas');
            canvas.isDrawingMode = true;

            colorSelector.onchange = function() {
                canvas.freeDrawingBrush.color = this.value;
            };

            // Reference the auto-generated proxy for the hub.
            var drawTogether = $.connection.DrawTogether;
            // Create a function that the hub can call back to display messages.
            drawTogether.client.addNewMessageToPage = function (name, message) {
                // Add the message to the page.
                $('#discussion').append('<li><strong>' + htmlEncode(name)
                    + '</strong>: ' + htmlEncode(message) + '</li>');
            };

            drawTogether.client.syncDrawing = function (serializedDrawing) {
                var object = JSON.parse(serializedDrawing);
                fabric.util.enlivenObjects([object], function(objects) {
                    var origRenderOnAddRemove = canvas.renderOnAddRemove;
                    canvas.renderOnAddRemove = false;

                    objects.forEach(function(o) {
                        canvas.add(o);
                    });
                    canvas.renderOnAddRemove = origRenderOnAddRemove;
                    canvas.renderAll();
                });
            };

            drawTogether.client.receiveCurrentCanvas = function(serializedDrawing) {
                var object = JSON.parse(serializedDrawing);
                fabric.util.enlivenObjects(object, function(objects) {
                    var origRenderOnAddRemove = canvas.renderOnAddRemove;
                    canvas.renderOnAddRemove = false;

                    objects.forEach(function(o) {
                        canvas.add(o);
                    });
                    canvas.renderOnAddRemove = origRenderOnAddRemove;
                    canvas.renderAll();
                });
            };

            drawTogether.client.receiveOnlineUsers = function (users) {
                users.forEach(function(element, index, array) {
                    userOnline(element.Username);
                });
            }

            drawTogether.client.userConnected = function(username) {
                userOnline(username);
                $('#discussion').append('<li><strong>' + htmlEncode(username)
                    + '</strong>: connected.</li>');
            }

            drawTogether.client.userDisconnected = function(username) {
                userOffline(username);
                $('#discussion').append('<li><strong>' + htmlEncode(username)
                    + '</strong>: disconnected.</li>');
            }

            drawTogether.client.clearCanvas = function() {
                canvas.clear();
            }

            // Get the user name and store it to prepend to messages.
            var username = prompt('Enter your name:', '');
            document.cookie = "username="+username;
            // Set initial focus to message input box.
            $('#message').focus();
            // Start the connection.
            $.connection.hub.start().done(function () {
                drawTogether.server.getOnlineUsers();
                drawTogether.server.getCurrentCanvas();
                $('#sendmessage').click(function () {
                    // Call the Send method on the hub.
                    drawTogether.server.send(username, $('#message').val());
                    // Clear text box and reset focus for next comment.
                    $('#message').val('').focus();
                });

                canvas.on('path:created', function(event) {
                    var json = JSON.stringify(event.path);
                    drawTogether.server.syncDraw(json);
                });

                $('#clearButton').click(function() {
                    canvas.clear();
                    drawTogether.server.clearCanvas();
                });
            });
        });

        function userOnline(username) {
            $('#users').append('<li id="user'+username+'">'+htmlEncode(username)+'</li>');
        }

        function userOffline(username) {
            var userId = '#user'+username;
            $(userId).remove();
        }


        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }
    </script>
}